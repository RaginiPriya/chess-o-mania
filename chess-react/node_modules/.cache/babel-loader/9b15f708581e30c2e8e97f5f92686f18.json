{"ast":null,"code":"var _jsxFileName = \"/Users/ragir/Documents/chess/chess-react/src/ChessGame.js\";\nimport React, { Component } from 'react';\nimport generateSquares from './generateSquares';\nimport getPieces from './getPieces';\nimport Square from './Square';\nimport Piece from './Piece';\nimport checkMove from './checkMove';\nimport NavBar from './NavBar';\nimport { Redirect } from 'react-router-dom';\nimport { Modal, Button, Image } from 'react-bootstrap';\nimport whiteQueen from './images/white_queen.png';\nimport blackQueen from './images/black_queen.png';\nimport whiteBishop from './images/white_bishop.png';\nimport blackBishop from './images/black_bishop.png';\nimport whiteKnight from './images/white_knight.png';\nimport blackKnight from './images/black_knight.png';\nimport whiteRook from './images/white_rook.png';\nimport blackRook from './images/black_rook.png';\nimport ChessPiece from './ChessPiece';\nimport { connect } from 'react-redux';\nimport home from './images/home.png';\n\nclass ChessGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      kingInCheck: false,\n      kingInCheckMate: false,\n      kingInStaleMate: false,\n      willPutKingInCheck: false,\n      squares: generateSquares(this.props.location.state.color === 'white' ? false : true),\n      pieces: getPieces(),\n      myTurn: this.props.location.state.color === 'white' ? true : false,\n      showQuitModal: false,\n      redirect: false,\n      showPieceSwapModal: false,\n      pieceToSwap: null,\n      squareToSwap: null,\n      player1: 0,\n      player2: 0,\n      won: false,\n      draw: false,\n      gameId: this.props.location.state.gameId,\n      myPiecesCaptured: [],\n      opponentPiecesCaptured: []\n    };\n\n    this.hide = () => {\n      this.setState({\n        showQuitModal: false,\n        showPieceSwapModal: false\n      });\n    };\n\n    this.redirect = () => {\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.listenForCheck = () => {\n      const king = this.state.squares.find(square => {\n        return square.piece && square.piece.piece === 'king' && square.piece.color === this.props.location.state.color;\n      });\n      const attackingPiece = this.state.squares.find(square => {\n        return square.piece && checkMove(square.piece, square, king.piece, king, this.state.squares);\n      });\n      return attackingPiece ? true : false;\n    };\n\n    this.isCheckMate = color => {\n      const isKingUnderAttack = this.listenForCheck();\n\n      if (isKingUnderAttack) {\n        this.setState({\n          kingInCheck: true\n        });\n      }\n\n      const mySquares = this.state.squares.filter(square => {\n        return square.piece && square.piece.color === color;\n      });\n      const hero = mySquares.find(mySquare => {\n        const destSquare = this.state.squares.find(square => {\n          const movePossible = checkMove(mySquare.piece, mySquare, square.piece, square, this.state.squares, isKingUnderAttack);\n\n          if (movePossible) {\n            var willPutInCheck = false;\n            const piece = square.piece;\n\n            if (piece) {\n              piece.row = null;\n              piece.column = null;\n            }\n\n            square.piece = mySquare.piece;\n            square.piece.row = square.row;\n            square.piece.column = square.column;\n            mySquare.piece = null;\n            const isCheck = this.listenForCheck();\n\n            if (isCheck) {\n              willPutInCheck = true;\n            }\n\n            mySquare.piece = square.piece;\n            square.piece = piece;\n            mySquare.piece.row = mySquare.row;\n            mySquare.piece.column = mySquare.column;\n\n            if (piece) {\n              piece.row = square.row;\n              piece.column = square.column;\n            }\n\n            return !willPutInCheck;\n          }\n\n          return false;\n        });\n        return destSquare ? true : false;\n      });\n\n      if (isKingUnderAttack && !hero) {\n        this.setState({\n          kingInCheckMate: true\n        });\n        clearInterval(this.myTimer);\n        this.socket.send(JSON.stringify({\n          'type': 'won',\n          gameId: this.state.gameId\n        }));\n      } else if (!isKingUnderAttack && !hero) {\n        this.setState({\n          kingInStaleMate: true\n        });\n        clearInterval(this.myTimer);\n        this.socket.send(JSON.stringify({\n          'type': 'draw',\n          gameId: this.state.gameId\n        }));\n      }\n    };\n\n    this.move = (selectedPiece, selectedSquare, piece, square) => {\n      this.setState({\n        willPutKingInCheck: false\n      });\n      const movePossible = checkMove(selectedPiece, selectedSquare, piece, square, this.state.squares, this.state.kingInCheck);\n\n      if (movePossible) {\n        square.piece = selectedPiece;\n        selectedPiece.row = square.row;\n        selectedPiece.column = square.column;\n\n        if (piece) {\n          this.state.myPiecesCaptured.push(piece.icon);\n          piece.row = null;\n          piece.column = null;\n        }\n\n        selectedSquare.piece = null;\n        const isCheck = this.listenForCheck();\n\n        if (isCheck) {\n          square.piece = piece;\n          selectedPiece.row = selectedSquare.row;\n          selectedPiece.column = selectedSquare.column;\n\n          if (piece) {\n            piece.row = square.row;\n            piece.column = square.column;\n          }\n\n          selectedSquare.piece = selectedPiece;\n          this.setState({\n            willPutKingInCheck: true\n          });\n        } else {\n          if (selectedPiece.piece === 'rook' || selectedPiece.piece === 'pawn' || selectedPiece.piece === 'king') {\n            selectedPiece.hasMoved = true;\n          }\n\n          var isCastling = false;\n\n          if (selectedSquare.isCastling) {\n            const rookSquare = this.state.squares.find(availableSquare => {\n              return availableSquare.isCastling && availableSquare.piece && availableSquare.piece.piece === 'rook';\n            });\n            const rook = rookSquare.piece;\n            const moveRookTo = this.state.squares.find(availableSquare => {\n              return availableSquare.row === rookSquare.row && availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2);\n            });\n            moveRookTo.piece = rook;\n            rook.row = moveRookTo.row;\n            rook.column = moveRookTo.column;\n            rookSquare.piece = null;\n            rook.hasMoved = true;\n            rookSquare.isCastling = false;\n            selectedSquare.isCastling = false;\n            isCastling = true;\n          }\n\n          if (this.state.kingInCheck) {\n            this.setState({\n              kingInCheck: false\n            });\n          }\n\n          if (selectedPiece.piece === 'pawn' && square.row === (this.props.location.state.color === 'white' ? 1 : 8)) {\n            this.setState({\n              showPieceSwapModal: true,\n              squareToSwap: square\n            });\n          } else {\n            clearInterval(this.myTimer);\n            this.opponentTimer = setInterval(() => {\n              this.setState(prevState => {\n                return { ...prevState,\n                  player2: prevState.player2 + 1\n                };\n              });\n            }, 1000);\n            this.socket.send(JSON.stringify({\n              type: \"move\",\n              gameId: this.state.gameId,\n              fromSquare: {\n                row: selectedSquare.row,\n                column: selectedSquare.column\n              },\n              isCastling: isCastling,\n              toSquare: {\n                row: square.row,\n                column: square.column\n              },\n              myColor: this.props.location.state.color\n            }));\n          }\n\n          this.setState({\n            myTurn: false\n          });\n          selectedPiece.selected = false;\n          selectedSquare.selected = false;\n        }\n      }\n\n      selectedPiece.selected = false;\n      selectedSquare.selected = false;\n      this.setState(prevState => {\n        return { ...prevState\n        };\n      });\n    };\n\n    this.selectPiece = (square, piece) => {\n      square.selected = true;\n      piece.selected = true;\n      this.setState(this.state);\n    };\n\n    this.swapPiece = (pieceImage, index) => {\n      const square = this.state.squareToSwap;\n      const pawn = square.piece;\n      pawn.row = null;\n      pawn.column = null;\n      const pieceType = ['queen', 'bishop', 'knight', 'rook'];\n      const piece = new ChessPiece(pieceType[index], this.props.location.state.color, square.row, square.column, pieceImage);\n      square.piece = piece;\n      piece.row = square.row;\n      piece.column = square.column;\n      const pieces = this.state.pieces;\n      pieces.push(piece);\n      this.setState({\n        pieces: pieces,\n        squares: this.state.squares\n      });\n      this.hide();\n      clearInterval(this.myTimer);\n      this.opponentTimer = setInterval(() => {\n        this.setState(prevState => {\n          return { ...prevState,\n            player2: prevState.player2 + 1\n          };\n        });\n      }, 1000);\n      this.socket.send(JSON.stringify({\n        type: \"swap\",\n        gameId: this.state.gameId,\n        index: index,\n        square: {\n          row: square.row,\n          column: square.column\n        },\n        myColor: this.props.location.state.color\n      }));\n    };\n  }\n\n  componentDidMount() {\n    // this.socket = new WebSocket(\"ws://localhost:8000/game/\"+this.props.location.state.gameId+\"?userId=\"+this.props.location.state.userId)\n    this.socket = this.props.socket;\n\n    this.socket.onmessage = input => {\n      var data = JSON.parse(input.data);\n\n      if (data.type === 'quit' && !this.state.kingInCheckMate) {\n        this.setState({\n          showQuitModal: true\n        });\n      }\n\n      if (data.type === 'swap') {\n        const {\n          index,\n          square,\n          myColor\n        } = data;\n        const opponentPieceArray = myColor === 'white' ? [whiteQueen, whiteBishop, whiteKnight, whiteRook] : [blackQueen, blackBishop, blackKnight, blackRook];\n        const pawnFromSquare = this.state.squares.find(sq => {\n          return sq.column === square.column && sq.row === (this.props.location.state.color === 'black' ? 2 : 7);\n        });\n        const pawn = pawnFromSquare.piece;\n        pawn.row = null;\n        pawn.column = null;\n        const pieceType = ['queen', 'bishop', 'knight', 'rook'];\n        const piece = new ChessPiece(pieceType[index], myColor, square.row, square.column, opponentPieceArray[index]);\n        const pawnToSquare = this.state.squares.find(sq => {\n          return sq.column === square.column && sq.row === square.row;\n        });\n        pawnToSquare.piece = piece;\n        piece.row = pawnToSquare.row;\n        piece.column = pawnToSquare.column;\n        const pieces = this.state.pieces;\n        pieces.push(piece);\n        this.setState({\n          pieces: pieces,\n          squares: this.state.squares,\n          myTurn: true\n        });\n        clearInterval(this.opponentTimer);\n        this.myTimer = setInterval(() => {\n          this.setState(prevState => {\n            return { ...prevState,\n              player1: prevState.player1 + 1\n            };\n          });\n        }, 1000);\n      }\n\n      if (data.type === 'won' || data.type === 'draw') {\n        clearInterval(this.opponentTimer);\n\n        if (data.endgame === 'won') {\n          this.setState({\n            \"won\": true\n          });\n        } else if (data.endgame === 'draw') {\n          this.setState({\n            \"draw\": true\n          });\n        }\n      }\n\n      if (data.type === 'move') {\n        const {\n          fromSquare,\n          toSquare,\n          isCastling\n        } = data;\n        const from = this.state.squares.find(square => {\n          return square.row === fromSquare.row && square.column === fromSquare.column;\n        });\n        const to = this.state.squares.find(square => {\n          return square.row === toSquare.row && square.column === toSquare.column;\n        });\n\n        if (from.piece.piece === 'rook' || from.piece.piece === 'pawn' || from.piece.piece === 'king') {\n          from.piece.hasMoved = true;\n        }\n\n        if (to.piece) {\n          this.state.opponentPiecesCaptured.push(to.piece.icon);\n          to.piece.row = null;\n          to.piece.column = null;\n        }\n\n        to.piece = from.piece;\n        from.piece = null;\n        to.piece.row = to.row;\n        to.piece.column = to.column;\n\n        if (isCastling) {\n          const rookSquare = this.state.squares.find(square => {\n            return square.piece && square.piece.piece === 'rook' && square.column === (fromSquare.column > toSquare.column ? 1 : 8) && square.row === fromSquare.row;\n          });\n          const rook = rookSquare.piece;\n          const moveRookTo = this.state.squares.find(availableSquare => {\n            return availableSquare.row === rookSquare.row && availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2);\n          });\n          moveRookTo.piece = rook;\n          rook.row = moveRookTo.row;\n          rook.column = moveRookTo.column;\n          rookSquare.piece = null;\n        }\n\n        this.setState({\n          squares: this.state.squares,\n          pieces: this.state.pieces,\n          myTurn: true\n        });\n        clearInterval(this.opponentTimer);\n        this.myTimer = setInterval(() => {\n          this.setState(prevState => {\n            return { ...prevState,\n              player1: prevState.player1 + 1\n            };\n          });\n        }, 1000);\n        this.isCheckMate(this.props.location.state.color);\n      }\n    };\n\n    if (this.props.location.state.color === 'white') {\n      this.myTimer = setInterval(() => {\n        this.setState(prevState => {\n          return { ...prevState,\n            player1: prevState.player1 + 1\n          };\n        });\n      }, 1000);\n    } else {\n      this.opponentTimer = setInterval(() => {\n        this.setState(prevState => {\n          return { ...prevState,\n            player2: prevState.player2 + 1\n          };\n        });\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    // this.socket.send(JSON.stringify({\"type\":\"quit\",gameId: this.state.gameId}))\n    console.log(\"socket closed\");\n    this.socket.close();\n  }\n\n  render() {\n    const pieceArray = this.props.location.state.color === 'white' ? [whiteQueen, whiteBishop, whiteKnight, whiteRook] : [blackQueen, blackBishop, blackKnight, blackRook];\n    const myName = this.props.location.state.player2 ? this.props.location.state.userId : 'You';\n    const opponentName = this.props.location.state.player2 ? this.props.location.state.player2 : 'Opponent';\n    const opponentColor = this.props.location.state.color === 'white' ? 'black' : 'white';\n    const player1Name = myName;\n    const player2Name = opponentName;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }\n    }, this.state.redirect ? /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 40\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'fixed',\n        left: '5%',\n        top: '5%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: home,\n      roundedCircle: true,\n      width: \"100\",\n      height: \"100\",\n      onClick: this.redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '20%',\n        position: 'fixed',\n        right: '2%',\n        top: '75%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      style: {\n        width: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: this.props.user.imageUrl,\n      roundedCircle: true,\n      width: \"60\",\n      height: \"60\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontFamily: 'Rouge Script, cursive'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 106\n      }\n    }, this.props.user.username, \" \")), this.state.myPiecesCaptured.length > 0 ? this.state.myPiecesCaptured.map(piece => {\n      return /*#__PURE__*/React.createElement(Image, {\n        src: piece,\n        roundedCircle: true,\n        width: \"30\",\n        height: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 37\n        }\n      });\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'rgba(1,1,1,0.3)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 27\n      }\n    }, \"Pieces captured\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '20%',\n        position: 'fixed',\n        right: '2%',\n        top: '5%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      style: {\n        width: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: this.props.location.state.opponentImageUrl,\n      roundedCircle: true,\n      width: \"60\",\n      height: \"60\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontFamily: 'Rouge Script, cursive'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 124\n      }\n    }, this.props.location.state.opponentName, \" \")), this.state.opponentPiecesCaptured.length > 0 ? this.state.opponentPiecesCaptured.map(piece => {\n      return /*#__PURE__*/React.createElement(Image, {\n        src: piece,\n        roundedCircle: true,\n        width: \"30\",\n        height: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 37\n        }\n      });\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'rgba(1,1,1,0.3)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 27\n      }\n    }, \"Pieces captured\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Square, {\n      squares: this.state.squares,\n      move: this.move,\n      pieces: this.state.pieces,\n      myTurn: this.state.myTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Piece, {\n      pieces: this.state.pieces,\n      squares: this.state.squares,\n      move: this.move,\n      selectPiece: this.selectPiece,\n      myTurn: this.state.myTurn,\n      color: this.props.location.state.color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Modal, {\n      backdrop: \"static\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      keyboard: false,\n      show: this.state.showQuitModal || this.state.kingInCheckMate || this.state.draw || this.state.won,\n      onHide: this.hide,\n      className: \"my-modal\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      hidden: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 29\n      }\n    }, 'GAME OVER!' + (this.state.showQuitModal ? ' Opponent Quit' : this.state.kingInCheckMate ? ' Your King has been captured' : this.state.draw ? ' DRAW' : ' YOU WON !!')), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.redirect,\n      className: \"button\",\n      style: {\n        backgroundColor: 'black',\n        border: '1px solid black',\n        width: '150px',\n        marginTop: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 29\n      }\n    }, \"HOME\")))), /*#__PURE__*/React.createElement(Modal, {\n      backdrop: \"static\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      keyboard: false,\n      show: this.state.showPieceSwapModal,\n      onHide: this.hide,\n      className: \"my-modal\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      hidden: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 29\n      }\n    }, \"Select the piece to swap\"), pieceArray.map((piece, index) => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: 'inline-block',\n          height: '20vh',\n          width: '20vh',\n          border: '3px solid black'\n        },\n        onClick: () => this.swapPiece(piece, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        style: {\n          height: '20vh'\n        },\n        src: piece,\n        alt: \"piece\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 45\n        }\n      }));\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  socket: state.websocketReducer.socket,\n  user: state.userReducer\n});\n\nexport default connect(mapStateToProps)(ChessGame);","map":{"version":3,"sources":["/Users/ragir/Documents/chess/chess-react/src/ChessGame.js"],"names":["React","Component","generateSquares","getPieces","Square","Piece","checkMove","NavBar","Redirect","Modal","Button","Image","whiteQueen","blackQueen","whiteBishop","blackBishop","whiteKnight","blackKnight","whiteRook","blackRook","ChessPiece","connect","home","ChessGame","state","kingInCheck","kingInCheckMate","kingInStaleMate","willPutKingInCheck","squares","props","location","color","pieces","myTurn","showQuitModal","redirect","showPieceSwapModal","pieceToSwap","squareToSwap","player1","player2","won","draw","gameId","myPiecesCaptured","opponentPiecesCaptured","hide","setState","listenForCheck","king","find","square","piece","attackingPiece","isCheckMate","isKingUnderAttack","mySquares","filter","hero","mySquare","destSquare","movePossible","willPutInCheck","row","column","isCheck","clearInterval","myTimer","socket","send","JSON","stringify","move","selectedPiece","selectedSquare","push","icon","hasMoved","isCastling","rookSquare","availableSquare","rook","moveRookTo","opponentTimer","setInterval","prevState","type","fromSquare","toSquare","myColor","selected","selectPiece","swapPiece","pieceImage","index","pawn","pieceType","componentDidMount","onmessage","input","data","parse","opponentPieceArray","pawnFromSquare","sq","pawnToSquare","endgame","from","to","componentWillUnmount","console","log","close","render","pieceArray","myName","userId","opponentName","opponentColor","player1Name","player2Name","position","left","top","width","right","user","imageUrl","fontFamily","username","length","map","opponentImageUrl","textAlign","backgroundColor","border","marginTop","display","height","mapStateToProps","websocketReducer","userReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport generateSquares from './generateSquares'\nimport getPieces from './getPieces'\nimport Square from './Square'\nimport Piece from './Piece'\nimport checkMove from './checkMove'\nimport NavBar from './NavBar'\nimport { Redirect } from 'react-router-dom';\nimport { Modal, Button, Image } from 'react-bootstrap'\nimport whiteQueen from './images/white_queen.png';\nimport blackQueen from './images/black_queen.png'\nimport whiteBishop from './images/white_bishop.png';\nimport blackBishop from './images/black_bishop.png'\nimport whiteKnight from './images/white_knight.png';\nimport blackKnight from './images/black_knight.png'\nimport whiteRook from './images/white_rook.png';\nimport blackRook from './images/black_rook.png'\nimport ChessPiece from './ChessPiece'\nimport { connect } from 'react-redux';\nimport home from './images/home.png'\n\nclass ChessGame extends Component {\n    state = {\n        kingInCheck: false,\n        kingInCheckMate: false,\n        kingInStaleMate: false,\n        willPutKingInCheck: false,\n        squares: generateSquares(this.props.location.state.color === 'white' ? false : true),\n        pieces: getPieces(),\n        myTurn: this.props.location.state.color === 'white' ? true : false,\n        showQuitModal: false,\n        redirect: false,\n        showPieceSwapModal: false,\n        pieceToSwap: null,\n        squareToSwap: null,\n        player1: 0,\n        player2: 0,\n        won: false,\n        draw: false,\n        gameId: this.props.location.state.gameId,\n        myPiecesCaptured: [],\n        opponentPiecesCaptured: []\n    }\n\n    hide = () => {\n        this.setState({ showQuitModal: false, showPieceSwapModal: false })\n    }\n\n    redirect = () => {\n        this.setState({ redirect: true })\n    }\n\n    componentDidMount() {\n        // this.socket = new WebSocket(\"ws://localhost:8000/game/\"+this.props.location.state.gameId+\"?userId=\"+this.props.location.state.userId)\n        this.socket = this.props.socket\n\n        this.socket.onmessage = (input) => {\n            var data = JSON.parse(input.data)\n            if (data.type === 'quit' && !this.state.kingInCheckMate) {\n                this.setState({ showQuitModal: true })\n            }\n            if (data.type === 'swap') {\n                const { index, square, myColor } = data\n                const opponentPieceArray = myColor === 'white' ? [whiteQueen, whiteBishop, whiteKnight, whiteRook] :\n                    [blackQueen, blackBishop, blackKnight, blackRook]\n\n                const pawnFromSquare = this.state.squares.find((sq) => { return sq.column === square.column && sq.row === (this.props.location.state.color === 'black' ? 2 : 7) })\n                const pawn = pawnFromSquare.piece\n                pawn.row = null\n                pawn.column = null\n                const pieceType = ['queen', 'bishop', 'knight', 'rook']\n                const piece = new ChessPiece(pieceType[index], myColor, square.row, square.column, opponentPieceArray[index])\n                const pawnToSquare = this.state.squares.find((sq) => { return sq.column === square.column && sq.row === square.row })\n                pawnToSquare.piece = piece\n                piece.row = pawnToSquare.row\n                piece.column = pawnToSquare.column\n                const pieces = this.state.pieces\n                pieces.push(piece)\n                this.setState({ pieces: pieces, squares: this.state.squares, myTurn: true });\n\n                clearInterval(this.opponentTimer)\n                this.myTimer = setInterval(() => {\n                    this.setState(prevState => {\n                        return {\n                            ...prevState,\n                            player1: prevState.player1 + 1\n                        }\n                    })\n                }, 1000)\n\n            }\n\n            if (data.type === 'won' || data.type === 'draw') {\n                clearInterval(this.opponentTimer)\n                if (data.endgame === 'won') {\n                    this.setState({ \"won\": true })\n                }\n                else if (data.endgame === 'draw') {\n                    this.setState({ \"draw\": true })\n                }\n            }\n\n            if (data.type === 'move') {\n                const { fromSquare, toSquare, isCastling } = data\n                const from = this.state.squares.find((square) => {\n                    return square.row === fromSquare.row && square.column === fromSquare.column\n                })\n                const to = this.state.squares.find((square) => {\n                    return square.row === toSquare.row && square.column === toSquare.column\n                })\n                if (from.piece.piece === 'rook' || from.piece.piece === 'pawn' || from.piece.piece === 'king') {\n                    from.piece.hasMoved = true\n                }\n                if (to.piece) {\n                    this.state.opponentPiecesCaptured.push(to.piece.icon)\n                    to.piece.row = null\n                    to.piece.column = null\n                }\n                to.piece = from.piece\n                from.piece = null\n                to.piece.row = to.row\n                to.piece.column = to.column\n                if (isCastling) {\n                    const rookSquare = this.state.squares.find((square) => {\n                        return (\n                            square.piece && square.piece.piece === 'rook' &&\n                            (square.column === (fromSquare.column > toSquare.column ? 1 : 8)) &&\n                            square.row === fromSquare.row\n                        )\n                    })\n                    const rook = rookSquare.piece\n                    const moveRookTo = this.state.squares.find((availableSquare) => {\n                        return (\n                            availableSquare.row === rookSquare.row &&\n                            availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2)\n                        )\n                    })\n                    moveRookTo.piece = rook\n                    rook.row = moveRookTo.row\n                    rook.column = moveRookTo.column\n                    rookSquare.piece = null\n                }\n                this.setState({ squares: this.state.squares, pieces: this.state.pieces, myTurn: true })\n                clearInterval(this.opponentTimer)\n                this.myTimer = setInterval(() => {\n                    this.setState(prevState => {\n                        return {\n                            ...prevState,\n                            player1: prevState.player1 + 1\n                        }\n                    })\n                }, 1000)\n                this.isCheckMate(this.props.location.state.color)\n            }\n        }\n\n        if (this.props.location.state.color === 'white') {\n            this.myTimer = setInterval(() => {\n                this.setState(prevState => {\n                    return {\n                        ...prevState,\n                        player1: prevState.player1 + 1\n                    }\n                })\n            }, 1000)\n        }\n        else {\n            this.opponentTimer = setInterval(() => {\n                this.setState(prevState => {\n                    return {\n                        ...prevState,\n                        player2: prevState.player2 + 1\n                    }\n                })\n            }, 1000)\n        }\n    }\n\n    componentWillUnmount() {\n        // this.socket.send(JSON.stringify({\"type\":\"quit\",gameId: this.state.gameId}))\n        console.log(\"socket closed\")\n        this.socket.close()\n    }\n\n    listenForCheck = () => {\n        const king = this.state.squares.find((square) => {\n            return square.piece && square.piece.piece === 'king' && square.piece.color === this.props.location.state.color\n        })\n        const attackingPiece = this.state.squares.find((square) => {\n            return square.piece && checkMove(square.piece, square, king.piece, king, this.state.squares)\n        })\n        return (attackingPiece ? true : false)\n    }\n\n    isCheckMate = (color) => {\n        const isKingUnderAttack = this.listenForCheck()\n        if (isKingUnderAttack) {\n            this.setState({ kingInCheck: true })\n        }\n\n        const mySquares = this.state.squares.filter((square) => {\n            return square.piece && square.piece.color === color\n        })\n\n        const hero = mySquares.find((mySquare) => {\n            const destSquare = this.state.squares.find((square) => {\n                const movePossible = checkMove(mySquare.piece, mySquare, square.piece, square, this.state.squares, isKingUnderAttack)\n                if (movePossible) {\n                    var willPutInCheck = false\n                    const piece = square.piece\n                    if (piece) {\n                        piece.row = null\n                        piece.column = null\n                    }\n                    square.piece = mySquare.piece\n                    square.piece.row = square.row\n                    square.piece.column = square.column\n                    mySquare.piece = null\n                    const isCheck = this.listenForCheck()\n                    if (isCheck) {\n                        willPutInCheck = true\n                    }\n                    mySquare.piece = square.piece\n                    square.piece = piece\n                    mySquare.piece.row = mySquare.row\n                    mySquare.piece.column = mySquare.column\n                    if (piece) {\n                        piece.row = square.row\n                        piece.column = square.column\n                    }\n                    return !willPutInCheck\n                }\n                return false\n            })\n            return (destSquare ? true : false)\n        })\n        if (isKingUnderAttack && !hero) {\n            this.setState({ kingInCheckMate: true })\n            clearInterval(this.myTimer)\n            this.socket.send(JSON.stringify({ 'type': 'won', gameId: this.state.gameId }))\n        }\n        else if (!isKingUnderAttack && !hero) {\n            this.setState({ kingInStaleMate: true })\n            clearInterval(this.myTimer)\n            this.socket.send(JSON.stringify({ 'type': 'draw', gameId: this.state.gameId }))\n        }\n    }\n\n    move = (selectedPiece, selectedSquare, piece, square) => {\n        this.setState({ willPutKingInCheck: false })\n        const movePossible = checkMove(selectedPiece, selectedSquare, piece, square, this.state.squares, this.state.kingInCheck)\n        if (movePossible) {\n            square.piece = selectedPiece\n            selectedPiece.row = square.row\n            selectedPiece.column = square.column\n            if (piece) {\n                this.state.myPiecesCaptured.push(piece.icon)\n                piece.row = null\n                piece.column = null\n            }\n            selectedSquare.piece = null\n            const isCheck = this.listenForCheck()\n            if (isCheck) {\n                square.piece = piece\n                selectedPiece.row = selectedSquare.row\n                selectedPiece.column = selectedSquare.column\n                if (piece) {\n                    piece.row = square.row\n                    piece.column = square.column\n                }\n                selectedSquare.piece = selectedPiece\n                this.setState({ willPutKingInCheck: true })\n            }\n            else {\n                if (selectedPiece.piece === 'rook' || selectedPiece.piece === 'pawn' || selectedPiece.piece === 'king') {\n                    selectedPiece.hasMoved = true\n                }\n                var isCastling = false\n                if (selectedSquare.isCastling) {\n                    const rookSquare = this.state.squares.find((availableSquare) => {\n                        return availableSquare.isCastling && availableSquare.piece && availableSquare.piece.piece === 'rook'\n                    })\n                    const rook = rookSquare.piece\n                    const moveRookTo = this.state.squares.find((availableSquare) => {\n                        return (\n                            availableSquare.row === rookSquare.row &&\n                            availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2)\n                        )\n                    })\n                    moveRookTo.piece = rook\n                    rook.row = moveRookTo.row\n                    rook.column = moveRookTo.column\n                    rookSquare.piece = null\n                    rook.hasMoved = true\n                    rookSquare.isCastling = false\n                    selectedSquare.isCastling = false\n                    isCastling = true\n                }\n                if (this.state.kingInCheck) {\n                    this.setState({ kingInCheck: false })\n                }\n                if (selectedPiece.piece === 'pawn' && square.row === (this.props.location.state.color === 'white' ? 1 : 8)) {\n                    this.setState({ showPieceSwapModal: true, squareToSwap: square })\n                }\n                else {\n                    clearInterval(this.myTimer)\n                    this.opponentTimer = setInterval(() => {\n                        this.setState(prevState => {\n                            return {\n                                ...prevState,\n                                player2: prevState.player2 + 1\n                            }\n                        })\n                    }, 1000)\n                    this.socket.send(JSON.stringify({ type: \"move\", gameId: this.state.gameId, fromSquare: { row: selectedSquare.row, column: selectedSquare.column }, isCastling: isCastling, toSquare: { row: square.row, column: square.column }, myColor: this.props.location.state.color }))\n                }\n                this.setState({ myTurn: false })\n                selectedPiece.selected = false\n                selectedSquare.selected = false\n            }\n        }\n        selectedPiece.selected = false\n        selectedSquare.selected = false\n        this.setState(prevState => {\n            return {\n                ...prevState\n            };\n        });\n    }\n\n    selectPiece = (square, piece) => {\n        square.selected = true\n        piece.selected = true\n        this.setState(this.state)\n    }\n\n    swapPiece = (pieceImage, index) => {\n        const square = this.state.squareToSwap\n        const pawn = square.piece\n        pawn.row = null\n        pawn.column = null\n        const pieceType = ['queen', 'bishop', 'knight', 'rook']\n        const piece = new ChessPiece(pieceType[index], this.props.location.state.color, square.row, square.column, pieceImage)\n        square.piece = piece\n        piece.row = square.row\n        piece.column = square.column\n        const pieces = this.state.pieces\n        pieces.push(piece)\n        this.setState({ pieces: pieces, squares: this.state.squares });\n        this.hide()\n        clearInterval(this.myTimer)\n        this.opponentTimer = setInterval(() => {\n            this.setState(prevState => {\n                return {\n                    ...prevState,\n                    player2: prevState.player2 + 1\n                }\n            })\n        }, 1000)\n        this.socket.send(JSON.stringify({ type: \"swap\", gameId: this.state.gameId, index: index, square: { row: square.row, column: square.column }, myColor: this.props.location.state.color }))\n    }\n\n    render() {\n        const pieceArray = this.props.location.state.color === 'white' ? [whiteQueen, whiteBishop, whiteKnight, whiteRook] :\n            [blackQueen, blackBishop, blackKnight, blackRook]\n\n        const myName = this.props.location.state.player2 ? this.props.location.state.userId : 'You'\n        const opponentName = this.props.location.state.player2 ? this.props.location.state.player2 : 'Opponent'\n        const opponentColor = this.props.location.state.color === 'white' ? 'black' : 'white'\n        const player1Name = myName\n        const player2Name = opponentName\n\n        return (\n            <div>\n                {this.state.redirect ? <Redirect to=\"/\" /> : null}\n\n                {/* <div>\n                    <div style={{textAlign:'center',width:'20%',position:'fixed',right:'5%',top:'75%',backgroundColor:this.props.location.state.color, border:'5px solid grey', borderRadius:'5px'}}>\n                        <h5 style={{color:opponentColor}}>{player1Name}</h5>\n                        <h5 style={{color:opponentColor}}>{new Date(this.state.player1 * 1000).toISOString().substr(11, 8)}</h5>\n                    </div>\n                    <div style={{textAlign:'center',width:'20%',position:'fixed',left:'5%',top:'20%',backgroundColor:opponentColor, border:'5px solid grey', borderRadius:'5px'}}>\n                        <h5 style={{color:this.props.location.state.color}}>{player2Name}</h5>\n                        <h5 style={{color:this.props.location.state.color}}>{new Date(this.state.player2 * 1000).toISOString().substr(11, 8)}</h5>\n                    </div>\n                </div> */}\n                <div style={{position: 'fixed', left: '5%', top: '5%'}}>\n                    <Image src={home} roundedCircle width=\"100\" height=\"100\" onClick={this.redirect}/>\n                </div>\n                <div style={{ width: '20%', position: 'fixed', right: '2%', top: '75%' }}>\n\n                    <fieldset>\n                        <legend style={{ width: 'auto' }}>\n                            <Image src={this.props.user.imageUrl} roundedCircle width=\"60\" height=\"60\" /><span style={{ fontFamily: 'Rouge Script, cursive' }}>{this.props.user.username} </span>\n                        </legend>\n                        {this.state.myPiecesCaptured.length > 0 ? \n                        (\n                            this.state.myPiecesCaptured.map((piece) => {\n                                return (\n                                    <Image src={piece} roundedCircle width=\"30\" height=\"30\" />\n                                )\n                            })\n                        )\n                        : <div style={{color:'rgba(1,1,1,0.3)'}}>Pieces captured</div>\n                        }\n\n                    </fieldset>\n\n\n                </div>\n                <div style={{ width: '20%', position: 'fixed', right: '2%', top: '5%' }}>\n\n                    <fieldset>\n                        <legend style={{ width: 'auto' }}>\n                            <Image src={this.props.location.state.opponentImageUrl} roundedCircle width=\"60\" height=\"60\" /><span style={{ fontFamily: 'Rouge Script, cursive' }}>{this.props.location.state.opponentName} </span>\n                        </legend>\n\n                        {this.state.opponentPiecesCaptured.length > 0 ? \n                        (\n                            this.state.opponentPiecesCaptured.map((piece) => {\n                                return (\n                                    <Image src={piece} roundedCircle width=\"30\" height=\"30\" />\n                                )\n                            })\n                        )\n                        : <div style={{color:'rgba(1,1,1,0.3)'}}>Pieces captured</div>\n                        }\n\n\n                    </fieldset>\n\n\n                </div>\n\n                <div className=\"Game\">\n                    <div className=\"Board\">\n                        <Square\n                            squares={this.state.squares}\n                            move={this.move}\n                            pieces={this.state.pieces}\n                            myTurn={this.state.myTurn}\n                        />\n                        <Piece\n                            pieces={this.state.pieces}\n                            squares={this.state.squares}\n                            move={this.move}\n                            selectPiece={this.selectPiece}\n                            myTurn={this.state.myTurn}\n                            color={this.props.location.state.color}\n                        />\n                    </div>\n                </div>\n\n                <Modal backdrop=\"static\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    keyboard={false}\n                    show={this.state.showQuitModal || this.state.kingInCheckMate || this.state.draw || this.state.won}\n                    onHide={this.hide}\n                    className=\"my-modal\"\n                    size=\"lg\"\n                >\n                    <Modal.Header closeButton hidden=\"true\"></Modal.Header>\n                    <Modal.Body>\n                        <div style={{ textAlign: \"center\" }}>\n                            <h4>{'GAME OVER!' + (this.state.showQuitModal ? ' Opponent Quit' : (this.state.kingInCheckMate ? ' Your King has been captured' : (this.state.draw ? ' DRAW' : ' YOU WON !!')))}</h4>\n                            <Button onClick={this.redirect} className='button' style={{ backgroundColor: 'black', border: '1px solid black', width: '150px', marginTop: '20px' }}>HOME</Button>\n                        </div>\n                    </Modal.Body>\n                </Modal>\n\n                <Modal backdrop=\"static\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    keyboard={false}\n                    show={this.state.showPieceSwapModal}\n                    onHide={this.hide}\n                    className=\"my-modal\"\n                    size=\"lg\"\n                >\n                    <Modal.Header closeButton hidden=\"true\"></Modal.Header>\n                    <Modal.Body>\n                        <div style={{ textAlign: \"center\" }}>\n                            <h4>Select the piece to swap</h4>\n                            {\n                                pieceArray.map((piece, index) => {\n                                    return (\n                                        <span style={{\n                                            display: 'inline-block',\n                                            height: '20vh',\n                                            width: '20vh',\n                                            border: '3px solid black'\n                                        }} onClick={() => this.swapPiece(piece, index)}>\n                                            <img style={{ height: '20vh' }} src={piece} alt=\"piece\" />\n                                        </span>\n                                    )\n                                })\n                            }\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    socket: state.websocketReducer.socket,\n    user: state.userReducer\n})\n\nexport default connect(mapStateToProps)(ChessGame)"]},"metadata":{},"sourceType":"module"}