{"ast":null,"code":"var _jsxFileName = \"/Users/ragir/Documents/chess/chess-react/src/ChessGame.js\";\nimport React, { Component } from 'react';\nimport generateSquares from './generateSquares';\nimport getPieces from './getPieces';\nimport Square from './Square';\nimport Piece from './Piece';\nimport checkMove from './checkMove';\nimport NavBar from './NavBar';\nimport { Redirect } from 'react-router-dom';\nimport { Modal, Button } from 'react-bootstrap';\nimport whiteQueen from './images/white_queen.png';\nimport blackQueen from './images/black_queen.png';\nimport whiteBishop from './images/white_bishop.png';\nimport blackBishop from './images/black_bishop.png';\nimport whiteKnight from './images/white_knight.png';\nimport blackKnight from './images/black_knight.png';\nimport whiteRook from './images/white_rook.png';\nimport blackRook from './images/black_rook.png';\nimport ChessPiece from './ChessPiece';\nimport { connect } from 'react-redux';\n\nclass ChessGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      kingInCheck: false,\n      kingInCheckMate: false,\n      kingInStaleMate: false,\n      willPutKingInCheck: false,\n      squares: generateSquares(this.props.location.state.color === 'white' ? false : true),\n      pieces: getPieces(),\n      myTurn: this.props.location.state.color === 'white' ? true : false,\n      showQuitModal: false,\n      redirect: false,\n      showPieceSwapModal: false,\n      pieceToSwap: null,\n      squareToSwap: null,\n      player1: 0,\n      player2: 0,\n      won: false,\n      draw: false,\n      gameId: this.props.location.state.gameId\n    };\n\n    this.hide = () => {\n      this.setState({\n        showQuitModal: false,\n        showPieceSwapModal: false\n      });\n    };\n\n    this.redirect = () => {\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.listenForCheck = () => {\n      const king = this.state.squares.find(square => {\n        return square.piece && square.piece.piece === 'king' && square.piece.color === this.props.location.state.color;\n      });\n      const attackingPiece = this.state.squares.find(square => {\n        return square.piece && checkMove(square.piece, square, king.piece, king, this.state.squares);\n      });\n      return attackingPiece ? true : false;\n    };\n\n    this.isCheckMate = color => {\n      const isKingUnderAttack = this.listenForCheck();\n\n      if (isKingUnderAttack) {\n        this.setState({\n          kingInCheck: true\n        });\n      }\n\n      const mySquares = this.state.squares.filter(square => {\n        return square.piece && square.piece.color === color;\n      });\n      const hero = mySquares.find(mySquare => {\n        const destSquare = this.state.squares.find(square => {\n          const movePossible = checkMove(mySquare.piece, mySquare, square.piece, square, this.state.squares, isKingUnderAttack);\n\n          if (movePossible) {\n            var willPutInCheck = false;\n            const piece = square.piece;\n\n            if (piece) {\n              piece.row = null;\n              piece.column = null;\n            }\n\n            square.piece = mySquare.piece;\n            square.piece.row = square.row;\n            square.piece.column = square.column;\n            mySquare.piece = null;\n            const isCheck = this.listenForCheck();\n\n            if (isCheck) {\n              willPutInCheck = true;\n            }\n\n            mySquare.piece = square.piece;\n            square.piece = piece;\n            mySquare.piece.row = mySquare.row;\n            mySquare.piece.column = mySquare.column;\n\n            if (piece) {\n              piece.row = square.row;\n              piece.column = square.column;\n            }\n\n            return !willPutInCheck;\n          }\n\n          return false;\n        });\n        return destSquare ? true : false;\n      });\n\n      if (isKingUnderAttack && !hero) {\n        this.setState({\n          kingInCheckMate: true\n        });\n        clearInterval(this.myTimer);\n        this.socket.send(JSON.stringify({\n          'type': 'won',\n          gameId: this.state.gameId\n        }));\n      } else if (!isKingUnderAttack && !hero) {\n        this.setState({\n          kingInStaleMate: true\n        });\n        clearInterval(this.myTimer);\n        this.socket.send(JSON.stringify({\n          'type': 'draw',\n          gameId: this.state.gameId\n        }));\n      }\n    };\n\n    this.move = (selectedPiece, selectedSquare, piece, square) => {\n      this.setState({\n        willPutKingInCheck: false\n      });\n      const movePossible = checkMove(selectedPiece, selectedSquare, piece, square, this.state.squares, this.state.kingInCheck);\n\n      if (movePossible) {\n        square.piece = selectedPiece;\n        selectedPiece.row = square.row;\n        selectedPiece.column = square.column;\n\n        if (piece) {\n          piece.row = null;\n          piece.column = null;\n        }\n\n        selectedSquare.piece = null;\n        const isCheck = this.listenForCheck();\n\n        if (isCheck) {\n          square.piece = piece;\n          selectedPiece.row = selectedSquare.row;\n          selectedPiece.column = selectedSquare.column;\n\n          if (piece) {\n            piece.row = square.row;\n            piece.column = square.column;\n          }\n\n          selectedSquare.piece = selectedPiece;\n          this.setState({\n            willPutKingInCheck: true\n          });\n        } else {\n          if (selectedPiece.piece === 'rook' || selectedPiece.piece === 'pawn' || selectedPiece.piece === 'king') {\n            selectedPiece.hasMoved = true;\n          }\n\n          var isCastling = false;\n\n          if (selectedSquare.isCastling) {\n            const rookSquare = this.state.squares.find(availableSquare => {\n              return availableSquare.isCastling && availableSquare.piece && availableSquare.piece.piece === 'rook';\n            });\n            const rook = rookSquare.piece;\n            const moveRookTo = this.state.squares.find(availableSquare => {\n              return availableSquare.row === rookSquare.row && availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2);\n            });\n            moveRookTo.piece = rook;\n            rook.row = moveRookTo.row;\n            rook.column = moveRookTo.column;\n            rookSquare.piece = null;\n            rook.hasMoved = true;\n            rookSquare.isCastling = false;\n            selectedSquare.isCastling = false;\n            isCastling = true;\n          }\n\n          if (this.state.kingInCheck) {\n            this.setState({\n              kingInCheck: false\n            });\n          }\n\n          if (selectedPiece.piece === 'pawn' && square.row === (this.props.location.state.color === 'white' ? 1 : 8)) {\n            this.setState({\n              showPieceSwapModal: true,\n              squareToSwap: square\n            });\n          } else {\n            clearInterval(this.myTimer);\n            this.opponentTimer = setInterval(() => {\n              this.setState(prevState => {\n                return { ...prevState,\n                  player2: prevState.player2 + 1\n                };\n              });\n            }, 1000);\n            console.log('ragini ' + this.state.gameId);\n            this.socket.send(JSON.stringify({\n              type: \"move\",\n              gameId: this.state.gameId,\n              fromSquare: {\n                row: selectedSquare.row,\n                column: selectedSquare.column\n              },\n              isCastling: isCastling,\n              toSquare: {\n                row: square.row,\n                column: square.column\n              },\n              myColor: this.props.location.state.color\n            }));\n          }\n\n          this.setState({\n            myTurn: false\n          });\n          selectedPiece.selected = false;\n          selectedSquare.selected = false;\n        }\n      }\n\n      selectedPiece.selected = false;\n      selectedSquare.selected = false;\n      this.setState(prevState => {\n        return { ...prevState\n        };\n      });\n    };\n\n    this.selectPiece = (square, piece) => {\n      square.selected = true;\n      piece.selected = true;\n      this.setState(this.state);\n    };\n\n    this.swapPiece = (pieceImage, index) => {\n      const square = this.state.squareToSwap;\n      const pawn = square.piece;\n      pawn.row = null;\n      pawn.column = null;\n      const pieceType = ['queen', 'bishop', 'knight', 'rook'];\n      const piece = new ChessPiece(pieceType[index], this.props.location.state.color, square.row, square.column, pieceImage);\n      square.piece = piece;\n      piece.row = square.row;\n      piece.column = square.column;\n      const pieces = this.state.pieces;\n      pieces.push(piece);\n      this.setState({\n        pieces: pieces,\n        squares: this.state.squares\n      });\n      this.hide();\n      clearInterval(this.myTimer);\n      this.opponentTimer = setInterval(() => {\n        this.setState(prevState => {\n          return { ...prevState,\n            player2: prevState.player2 + 1\n          };\n        });\n      }, 1000);\n      this.socket.send(JSON.stringify({\n        type: \"swap\",\n        gameId: this.state.gameId,\n        index: index,\n        square: {\n          row: square.row,\n          column: square.column\n        },\n        myColor: this.props.location.state.color\n      }));\n    };\n  }\n\n  componentDidMount() {\n    // this.socket = new WebSocket(\"ws://localhost:8000/game/\"+this.props.location.state.gameId+\"?userId=\"+this.props.location.state.userId)\n    this.socket = this.props.socket;\n\n    this.socket.onmessage = input => {\n      var data = JSON.parse(input.data);\n\n      if (data.type === 'quit' && !this.state.kingInCheckMate) {\n        this.setState({\n          showQuitModal: true\n        });\n      }\n\n      if (data.type === 'swap') {\n        const {\n          index,\n          square,\n          myColor\n        } = data;\n        const opponentPieceArray = myColor === 'white' ? [whiteQueen, whiteBishop, whiteKnight, whiteRook] : [blackQueen, blackBishop, blackKnight, blackRook];\n        const pawnFromSquare = this.state.squares.find(sq => {\n          return sq.column === square.column && sq.row === (this.props.location.state.color === 'black' ? 2 : 7);\n        });\n        const pawn = pawnFromSquare.piece;\n        pawn.row = null;\n        pawn.column = null;\n        const pieceType = ['queen', 'bishop', 'knight', 'rook'];\n        const piece = new ChessPiece(pieceType[index], myColor, square.row, square.column, opponentPieceArray[index]);\n        const pawnToSquare = this.state.squares.find(sq => {\n          return sq.column === square.column && sq.row === square.row;\n        });\n        pawnToSquare.piece = piece;\n        piece.row = pawnToSquare.row;\n        piece.column = pawnToSquare.column;\n        const pieces = this.state.pieces;\n        pieces.push(piece);\n        this.setState({\n          pieces: pieces,\n          squares: this.state.squares,\n          myTurn: true\n        });\n        clearInterval(this.opponentTimer);\n        this.myTimer = setInterval(() => {\n          this.setState(prevState => {\n            return { ...prevState,\n              player1: prevState.player1 + 1\n            };\n          });\n        }, 1000);\n      }\n\n      if (data.type === 'won' || data.type === 'draw') {\n        clearInterval(this.opponentTimer);\n\n        if (data.endgame === 'won') {\n          this.setState({\n            \"won\": true\n          });\n        } else if (data.endgame === 'draw') {\n          this.setState({\n            \"draw\": true\n          });\n        }\n      }\n\n      if (data.type === 'move') {\n        const {\n          fromSquare,\n          toSquare,\n          isCastling\n        } = data;\n        const from = this.state.squares.find(square => {\n          return square.row === fromSquare.row && square.column === fromSquare.column;\n        });\n        const to = this.state.squares.find(square => {\n          return square.row === toSquare.row && square.column === toSquare.column;\n        });\n\n        if (from.piece.piece === 'rook' || from.piece.piece === 'pawn' || from.piece.piece === 'king') {\n          from.piece.hasMoved = true;\n        }\n\n        if (to.piece) {\n          to.piece.row = null;\n          to.piece.column = null;\n        }\n\n        to.piece = from.piece;\n        from.piece = null;\n        to.piece.row = to.row;\n        to.piece.column = to.column;\n\n        if (isCastling) {\n          const rookSquare = this.state.squares.find(square => {\n            return square.piece && square.piece.piece === 'rook' && square.column === (fromSquare.column > toSquare.column ? 1 : 8) && square.row === fromSquare.row;\n          });\n          const rook = rookSquare.piece;\n          const moveRookTo = this.state.squares.find(availableSquare => {\n            return availableSquare.row === rookSquare.row && availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2);\n          });\n          moveRookTo.piece = rook;\n          rook.row = moveRookTo.row;\n          rook.column = moveRookTo.column;\n          rookSquare.piece = null;\n        }\n\n        this.setState({\n          squares: this.state.squares,\n          pieces: this.state.pieces,\n          myTurn: true\n        });\n        clearInterval(this.opponentTimer);\n        this.myTimer = setInterval(() => {\n          this.setState(prevState => {\n            return { ...prevState,\n              player1: prevState.player1 + 1\n            };\n          });\n        }, 1000);\n        this.isCheckMate(this.props.location.state.color);\n      }\n    };\n\n    if (this.props.location.state.color === 'white') {\n      this.myTimer = setInterval(() => {\n        this.setState(prevState => {\n          return { ...prevState,\n            player1: prevState.player1 + 1\n          };\n        });\n      }, 1000);\n    } else {\n      this.opponentTimer = setInterval(() => {\n        this.setState(prevState => {\n          return { ...prevState,\n            player2: prevState.player2 + 1\n          };\n        });\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    // this.socket.send(JSON.stringify({\"type\":\"quit\",gameId: this.state.gameId}))\n    console.log(\"socket closed\");\n    this.socket.close();\n  }\n\n  render() {\n    const pieceArray = this.props.location.state.color === 'white' ? [whiteQueen, whiteBishop, whiteKnight, whiteRook] : [blackQueen, blackBishop, blackKnight, blackRook];\n    const myName = this.props.location.state.player2 ? this.props.location.state.userId : 'You';\n    const opponentName = this.props.location.state.player2 ? this.props.location.state.player2 : 'Opponent';\n    const opponentColor = this.props.location.state.color === 'white' ? 'black' : 'white';\n    const player1Name = myName;\n    const player2Name = opponentName;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 13\n      }\n    }, this.state.redirect ? /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 40\n      }\n    }) : null, /*#__PURE__*/React.createElement(NavBar, {\n      showQuit: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        width: '20%',\n        position: 'fixed',\n        right: '5%',\n        top: '75%',\n        backgroundColor: this.props.location.state.color,\n        border: '5px solid grey',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      style: {\n        color: opponentColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 25\n      }\n    }, player1Name), /*#__PURE__*/React.createElement(\"h5\", {\n      style: {\n        color: opponentColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 25\n      }\n    }, new Date(this.state.player1 * 1000).toISOString().substr(11, 8))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        width: '20%',\n        position: 'fixed',\n        left: '5%',\n        top: '20%',\n        backgroundColor: opponentColor,\n        border: '5px solid grey',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      style: {\n        color: this.props.location.state.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 25\n      }\n    }, player2Name), /*#__PURE__*/React.createElement(\"h5\", {\n      style: {\n        color: this.props.location.state.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 25\n      }\n    }, new Date(this.state.player2 * 1000).toISOString().substr(11, 8)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Square, {\n      squares: this.state.squares,\n      move: this.move,\n      pieces: this.state.pieces,\n      myTurn: this.state.myTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Piece, {\n      pieces: this.state.pieces,\n      squares: this.state.squares,\n      move: this.move,\n      selectPiece: this.selectPiece,\n      myTurn: this.state.myTurn,\n      color: this.props.location.state.color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Modal, {\n      backdrop: \"static\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      keyboard: false,\n      show: this.state.showQuitModal || this.state.kingInCheckMate || this.state.draw || this.state.won,\n      onHide: this.hide,\n      className: \"my-modal\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      hidden: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 29\n      }\n    }, 'GAME OVER!' + (this.state.showQuitModal ? ' Opponent Quit' : this.state.kingInCheckMate ? ' Your King has been captured' : this.state.draw ? ' DRAW' : ' YOU WON !!')), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.redirect,\n      className: \"button\",\n      style: {\n        backgroundColor: 'black',\n        border: '1px solid black',\n        width: '150px',\n        marginTop: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 29\n      }\n    }, \"HOME\")))), /*#__PURE__*/React.createElement(Modal, {\n      backdrop: \"static\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      keyboard: false,\n      show: this.state.showPieceSwapModal,\n      onHide: this.hide,\n      className: \"my-modal\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      hidden: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 29\n      }\n    }, \"Select the piece to swap\"), pieceArray.map((piece, index) => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: 'inline-block',\n          height: '20vh',\n          width: '20vh',\n          border: '3px solid black'\n        },\n        onClick: () => this.swapPiece(piece, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        style: {\n          height: '20vh'\n        },\n        src: piece,\n        alt: \"piece\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 45\n        }\n      }));\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  socket: state.websocketReducer.socket\n});\n\nexport default connect(mapStateToProps)(ChessGame);","map":{"version":3,"sources":["/Users/ragir/Documents/chess/chess-react/src/ChessGame.js"],"names":["React","Component","generateSquares","getPieces","Square","Piece","checkMove","NavBar","Redirect","Modal","Button","whiteQueen","blackQueen","whiteBishop","blackBishop","whiteKnight","blackKnight","whiteRook","blackRook","ChessPiece","connect","ChessGame","state","kingInCheck","kingInCheckMate","kingInStaleMate","willPutKingInCheck","squares","props","location","color","pieces","myTurn","showQuitModal","redirect","showPieceSwapModal","pieceToSwap","squareToSwap","player1","player2","won","draw","gameId","hide","setState","listenForCheck","king","find","square","piece","attackingPiece","isCheckMate","isKingUnderAttack","mySquares","filter","hero","mySquare","destSquare","movePossible","willPutInCheck","row","column","isCheck","clearInterval","myTimer","socket","send","JSON","stringify","move","selectedPiece","selectedSquare","hasMoved","isCastling","rookSquare","availableSquare","rook","moveRookTo","opponentTimer","setInterval","prevState","console","log","type","fromSquare","toSquare","myColor","selected","selectPiece","swapPiece","pieceImage","index","pawn","pieceType","push","componentDidMount","onmessage","input","data","parse","opponentPieceArray","pawnFromSquare","sq","pawnToSquare","endgame","from","to","componentWillUnmount","close","render","pieceArray","myName","userId","opponentName","opponentColor","player1Name","player2Name","textAlign","width","position","right","top","backgroundColor","border","borderRadius","Date","toISOString","substr","left","marginTop","map","display","height","mapStateToProps","websocketReducer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport generateSquares from './generateSquares'\nimport getPieces from './getPieces'\nimport Square from './Square'\nimport Piece from './Piece'\nimport checkMove from './checkMove'\nimport NavBar from './NavBar'\nimport { Redirect } from 'react-router-dom';\nimport {Modal, Button} from 'react-bootstrap'\nimport whiteQueen from './images/white_queen.png';\nimport blackQueen from './images/black_queen.png'\nimport whiteBishop from './images/white_bishop.png';\nimport blackBishop from './images/black_bishop.png'\nimport whiteKnight from './images/white_knight.png';\nimport blackKnight from './images/black_knight.png'\nimport whiteRook from './images/white_rook.png';\nimport blackRook from './images/black_rook.png'\nimport ChessPiece from './ChessPiece'\nimport { connect } from 'react-redux';\n\nclass ChessGame extends Component{\n    state = {\n        kingInCheck : false,\n        kingInCheckMate : false,\n        kingInStaleMate : false,\n        willPutKingInCheck : false,\n        squares :  generateSquares(this.props.location.state.color === 'white' ? false : true),\n        pieces :  getPieces(),\n        myTurn :  this.props.location.state.color === 'white' ? true : false,\n        showQuitModal : false,\n        redirect : false,\n        showPieceSwapModal : false,\n        pieceToSwap: null,\n        squareToSwap: null,\n        player1 : 0,\n        player2 : 0,\n        won : false,\n        draw : false,\n        gameId : this.props.location.state.gameId\n    }\n\n    hide = () => {\n        this.setState({showQuitModal : false, showPieceSwapModal:false})\n    }\n\n    redirect = () => {\n        this.setState({redirect : true})\n    }\n\n    componentDidMount(){\n        // this.socket = new WebSocket(\"ws://localhost:8000/game/\"+this.props.location.state.gameId+\"?userId=\"+this.props.location.state.userId)\n        this.socket = this.props.socket\n\n        this.socket.onmessage = (input) => {\n            var data = JSON.parse(input.data)\n            if(data.type === 'quit' && !this.state.kingInCheckMate){\n                this.setState({showQuitModal: true})\n            }\n            if(data.type === 'swap'){\n                const {index, square, myColor} = data\n                const opponentPieceArray = myColor === 'white' ? [whiteQueen,whiteBishop,whiteKnight,whiteRook] :\n                [blackQueen,blackBishop,blackKnight,blackRook]\n\n                const pawnFromSquare = this.state.squares.find((sq) => { return sq.column === square.column && sq.row === (this.props.location.state.color === 'black' ? 2 : 7)})\n                const pawn = pawnFromSquare.piece\n                pawn.row = null\n                pawn.column = null\n                const pieceType = ['queen','bishop','knight','rook']\n                const piece = new ChessPiece(pieceType[index],myColor, square.row, square.column, opponentPieceArray[index])  \n                const pawnToSquare = this.state.squares.find((sq) => { return sq.column === square.column && sq.row === square.row})\n                pawnToSquare.piece = piece\n                piece.row = pawnToSquare.row\n                piece.column = pawnToSquare.column\n                const pieces = this.state.pieces\n                pieces.push(piece)\n                this.setState({pieces : pieces , squares : this.state.squares, myTurn: true});\n\n                clearInterval(this.opponentTimer)\n                this.myTimer = setInterval(() => {\n                    this.setState(prevState =>{\n                        return{\n                             ...prevState,\n                             player1 : prevState.player1 +1\n                        }\n                    })\n                }, 1000)\n\n            }\n\n            if(data.type === 'won' || data.type === 'draw'){\n                clearInterval(this.opponentTimer)\n                if(data.endgame === 'won'){\n                    this.setState({\"won\": true})\n                }\n                else if(data.endgame === 'draw'){\n                    this.setState({\"draw\": true})\n                }\n            }\n\n            if(data.type === 'move'){\n                const {fromSquare, toSquare, isCastling} = data\n                const from = this.state.squares.find((square) => {\n                    return square.row === fromSquare.row  && square.column === fromSquare.column\n                })\n                const to = this.state.squares.find((square) => {\n                    return square.row === toSquare.row  && square.column === toSquare.column\n                })\n                if(from.piece.piece === 'rook' || from.piece.piece === 'pawn' || from.piece.piece === 'king'){\n                    from.piece.hasMoved = true\n                }\n                if(to.piece){\n                    to.piece.row = null\n                    to.piece.column = null\n                }\n                to.piece = from.piece\n                from.piece = null\n                to.piece.row = to.row\n                to.piece.column = to.column\n                if(isCastling){\n                    const rookSquare = this.state.squares.find((square) => {\n                        return (\n                            square.piece && square.piece.piece === 'rook' && \n                            (square.column === (fromSquare.column > toSquare.column ? 1 : 8)) &&\n                            square.row === fromSquare.row\n                        )\n                    })\n                    const rook = rookSquare.piece\n                    const moveRookTo = this.state.squares.find((availableSquare) => {\n                        return (\n                            availableSquare.row === rookSquare.row && \n                            availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2)\n                        )\n                    })\n                    moveRookTo.piece = rook\n                    rook.row = moveRookTo.row\n                    rook.column = moveRookTo.column\n                    rookSquare.piece = null\n                }\n                this.setState({squares: this.state.squares, pieces: this.state.pieces, myTurn: true})\n                clearInterval(this.opponentTimer)\n                this.myTimer = setInterval(() => {\n                    this.setState(prevState =>{\n                        return{\n                             ...prevState,\n                             player1 : prevState.player1 +1\n                        }\n                    })\n                }, 1000)\n                this.isCheckMate(this.props.location.state.color)                \n            }            \n        }\n\n        if(this.props.location.state.color === 'white'){\n            this.myTimer = setInterval(() => {\n                this.setState(prevState =>{\n                    return{\n                         ...prevState,\n                         player1 : prevState.player1 +1\n                    }\n                })\n            }, 1000)\n        }\n        else {\n            this.opponentTimer = setInterval(() => {\n                this.setState(prevState =>{\n                    return{\n                         ...prevState,\n                         player2 : prevState.player2 +1\n                    }\n                })\n            }, 1000)\n        }        \n    }\n\n    componentWillUnmount() {\n        // this.socket.send(JSON.stringify({\"type\":\"quit\",gameId: this.state.gameId}))\n        console.log(\"socket closed\")\n        this.socket.close()\n    }\n\n    listenForCheck = () => {\n        const king = this.state.squares.find((square) => {\n            return square.piece && square.piece.piece === 'king'  && square.piece.color === this.props.location.state.color\n        })\n        const attackingPiece = this.state.squares.find((square) => {\n            return square.piece && checkMove(square.piece, square, king.piece, king, this.state.squares)\n        })\n        return (attackingPiece ? true : false)\n    }\n\n    isCheckMate = (color) => {\n        const isKingUnderAttack = this.listenForCheck()\n        if(isKingUnderAttack){\n            this.setState({kingInCheck:true})\n        }   \n            \n        const mySquares = this.state.squares.filter((square) => {\n            return square.piece && square.piece.color === color\n        })\n\n        const hero = mySquares.find((mySquare) => {\n            const destSquare = this.state.squares.find((square) => {\n                const movePossible = checkMove(mySquare.piece, mySquare, square.piece, square, this.state.squares, isKingUnderAttack)\n                if(movePossible){\n                    var willPutInCheck = false\n                    const piece = square.piece\n                    if(piece){\n                        piece.row = null\n                        piece.column = null\n                    }\n                    square.piece = mySquare.piece\n                    square.piece.row = square.row\n                    square.piece.column = square.column\n                    mySquare.piece = null                \n                    const isCheck = this.listenForCheck()\n                    if(isCheck){\n                        willPutInCheck = true\n                    }\n                    mySquare.piece = square.piece\n                    square.piece = piece\n                    mySquare.piece.row = mySquare.row\n                    mySquare.piece.column = mySquare.column\n                    if(piece){\n                        piece.row = square.row\n                        piece.column = square.column\n                    }\n                    return !willPutInCheck\n                }\n                return false\n            })\n            return (destSquare ? true : false)\n        })\n        if(isKingUnderAttack && !hero){\n            this.setState({kingInCheckMate: true})\n            clearInterval(this.myTimer)\n            this.socket.send(JSON.stringify({'type':'won',gameId: this.state.gameId}))\n        }\n        else if(!isKingUnderAttack && !hero){\n            this.setState({kingInStaleMate: true})\n            clearInterval(this.myTimer)\n            this.socket.send(JSON.stringify({'type':'draw',gameId: this.state.gameId}))\n        }\n    }\n\n    move = (selectedPiece, selectedSquare, piece, square) => {\n        this.setState({willPutKingInCheck: false})\n        const movePossible = checkMove(selectedPiece, selectedSquare, piece, square, this.state.squares, this.state.kingInCheck)\n        if(movePossible){                \n            square.piece = selectedPiece\n            selectedPiece.row = square.row\n            selectedPiece.column = square.column\n            if(piece){\n                piece.row = null\n                piece.column = null\n            }\n            selectedSquare.piece = null\n            const isCheck = this.listenForCheck()\n            if(isCheck){\n                square.piece = piece\n                selectedPiece.row = selectedSquare.row\n                selectedPiece.column = selectedSquare.column\n                if(piece){\n                    piece.row = square.row\n                    piece.column = square.column\n                }\n                selectedSquare.piece = selectedPiece\n                this.setState({willPutKingInCheck: true})                \n            }\n            else{\n                if(selectedPiece.piece === 'rook' || selectedPiece.piece === 'pawn' || selectedPiece.piece === 'king'){\n                    selectedPiece.hasMoved = true\n                }\n                var isCastling = false\n                if(selectedSquare.isCastling){\n                    const rookSquare = this.state.squares.find((availableSquare) => {\n                        return availableSquare.isCastling && availableSquare.piece && availableSquare.piece.piece === 'rook'\n                    })\n                    const rook = rookSquare.piece\n                    const moveRookTo = this.state.squares.find((availableSquare) => {\n                        return (\n                            availableSquare.row === rookSquare.row && \n                            availableSquare.column === (rookSquare.column === 1 ? rookSquare.column + 3 : rookSquare.column - 2)\n                        )\n                    })\n                    moveRookTo.piece = rook\n                    rook.row = moveRookTo.row\n                    rook.column = moveRookTo.column\n                    rookSquare.piece = null\n                    rook.hasMoved = true\n                    rookSquare.isCastling = false\n                    selectedSquare.isCastling = false\n                    isCastling = true\n                }\n                if(this.state.kingInCheck){\n                    this.setState({kingInCheck:false})\n                }\n                if(selectedPiece.piece === 'pawn' && square.row === (this.props.location.state.color === 'white' ? 1 : 8)){\n                    this.setState({showPieceSwapModal: true,squareToSwap: square})\n                }\n                else{\n                    clearInterval(this.myTimer)\n                    this.opponentTimer = setInterval(() => {\n                        this.setState(prevState =>{\n                            return{\n                                 ...prevState,\n                                 player2 : prevState.player2 +1\n                            }\n                        })\n                    }, 1000)\n                    console.log('ragini '+this.state.gameId)\n                    this.socket.send(JSON.stringify({type:\"move\", gameId: this.state.gameId, fromSquare: {row: selectedSquare.row , column: selectedSquare.column}, isCastling: isCastling, toSquare: {row: square.row, column: square.column}, myColor: this.props.location.state.color }))\n                }\n                this.setState({myTurn: false})\n                selectedPiece.selected = false\n                selectedSquare.selected = false\n            }            \n        }\n        selectedPiece.selected = false\n        selectedSquare.selected = false\n        this.setState(prevState => {\n            return {\n              ...prevState\n            };\n        });\n    }\n\n    selectPiece = (square, piece) => {\n        square.selected = true\n        piece.selected = true\n        this.setState(this.state)\n    }\n\n    swapPiece = (pieceImage, index) => {\n        const square = this.state.squareToSwap\n        const pawn = square.piece\n        pawn.row = null\n        pawn.column = null\n        const pieceType = ['queen','bishop','knight','rook']\n        const piece = new ChessPiece(pieceType[index],this.props.location.state.color, square.row, square.column, pieceImage)  \n        square.piece = piece\n        piece.row = square.row\n        piece.column = square.column\n        const pieces = this.state.pieces\n        pieces.push(piece)\n        this.setState({pieces : pieces , squares : this.state.squares});\n        this.hide()\n        clearInterval(this.myTimer)\n        this.opponentTimer = setInterval(() => {\n            this.setState(prevState =>{\n                return{\n                     ...prevState,\n                     player2 : prevState.player2 +1\n                }\n            })\n        }, 1000)\n        this.socket.send(JSON.stringify({type:\"swap\", gameId: this.state.gameId,  index: index, square: {row: square.row, column: square.column}, myColor: this.props.location.state.color}))\n    }\n\n    render(){\n        const pieceArray = this.props.location.state.color === 'white' ? [whiteQueen,whiteBishop,whiteKnight,whiteRook] :\n            [blackQueen,blackBishop,blackKnight,blackRook]\n\n        const myName = this.props.location.state.player2 ? this.props.location.state.userId : 'You'\n        const opponentName = this.props.location.state.player2 ? this.props.location.state.player2 : 'Opponent'\n        const opponentColor = this.props.location.state.color === 'white' ? 'black' : 'white'\n        const player1Name =  myName\n        const player2Name = opponentName\n\n        return(            \n            <div>\n                {this.state.redirect ? <Redirect to=\"/\" /> : null}\n\n                <NavBar showQuit = \"true\"/>\n\n                <div>\n                    <div style={{textAlign:'center',width:'20%',position:'fixed',right:'5%',top:'75%',backgroundColor:this.props.location.state.color, border:'5px solid grey', borderRadius:'5px'}}>\n                        <h5 style={{color:opponentColor}}>{player1Name}</h5>\n                        <h5 style={{color:opponentColor}}>{new Date(this.state.player1 * 1000).toISOString().substr(11, 8)}</h5>\n                    </div>\n                    <div style={{textAlign:'center',width:'20%',position:'fixed',left:'5%',top:'20%',backgroundColor:opponentColor, border:'5px solid grey', borderRadius:'5px'}}>\n                        <h5 style={{color:this.props.location.state.color}}>{player2Name}</h5>\n                        <h5 style={{color:this.props.location.state.color}}>{new Date(this.state.player2 * 1000).toISOString().substr(11, 8)}</h5>\n                    </div>\n                </div>\n            \n                <div className=\"Game\">\n                    <div className=\"Board\">                    \n                        <Square \n                            squares={this.state.squares} \n                            move={this.move} \n                            pieces={this.state.pieces}\n                            myTurn={this.state.myTurn}\n                        />\n                        <Piece \n                            pieces={this.state.pieces} \n                            squares={this.state.squares} \n                            move={this.move} \n                            selectPiece={this.selectPiece}\n                            myTurn={this.state.myTurn}\n                            color={this.props.location.state.color}\n                        />\n                    </div>                \n                </div>\n            \n                <Modal backdrop=\"static\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    keyboard={false}\n                    show={this.state.showQuitModal || this.state.kingInCheckMate || this.state.draw || this.state.won}\n                    onHide={this.hide}\n                    className=\"my-modal\"\n                    size=\"lg\"\n                >\n                    <Modal.Header closeButton hidden=\"true\"></Modal.Header>\n                    <Modal.Body>\n                        <div style={{textAlign:\"center\"}}>\n                            <h4>{'GAME OVER!'+(this.state.showQuitModal ? ' Opponent Quit' : (this.state.kingInCheckMate ? ' Your King has been captured' : (this.state.draw ? ' DRAW' : ' YOU WON !!')))}</h4>\n                            <Button onClick={this.redirect} className='button' style={{backgroundColor:'black', border: '1px solid black',width: '150px',marginTop: '20px'}}>HOME</Button>\n                        </div>\n                    </Modal.Body>\n                </Modal>\n\n                <Modal backdrop=\"static\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    keyboard={false}\n                    show={this.state.showPieceSwapModal}\n                    onHide={this.hide}\n                    className=\"my-modal\"\n                    size=\"lg\"\n                >\n                    <Modal.Header closeButton hidden=\"true\"></Modal.Header>\n                    <Modal.Body>\n                        <div style={{textAlign:\"center\"}}>\n                            <h4>Select the piece to swap</h4>\n                            {\n                                pieceArray.map((piece,index) => {\n                                    return(\n                                        <span style={{\n                                        display: 'inline-block',\n                                        height: '20vh',\n                                        width: '20vh',\n                                        border: '3px solid black'\n                                        }} onClick={() => this.swapPiece(piece, index)}>\n                                            <img style={{height:'20vh'}} src={piece} alt=\"piece\"/>\n                                        </span>\n                                    )\n                                })\n                            }\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div>            \n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    socket: state.websocketReducer.socket\n})\n\nexport default connect(mapStateToProps)(ChessGame)"]},"metadata":{},"sourceType":"module"}