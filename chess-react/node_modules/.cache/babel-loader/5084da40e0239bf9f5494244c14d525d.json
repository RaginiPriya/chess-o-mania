{"ast":null,"code":"var checkForRook=function checkForRook(selectedSquare,square,squares){var sameRow=selectedSquare.row===square.row;var sameColumn=selectedSquare.column===square.column;if(sameRow){var firstColumn,secondColumn;if(selectedSquare.column<square.column){firstColumn=selectedSquare.column;secondColumn=square.column;}else{firstColumn=square.column;secondColumn=selectedSquare.column;}var availableSquares=squares.find(function(availableSquare){return availableSquare.row===square.row&&availableSquare.column>firstColumn&&availableSquare.column<secondColumn&&availableSquare.piece;});return availableSquares?false:true;}if(sameColumn){var firstRow,secondRow;if(selectedSquare.row<square.row){firstRow=selectedSquare.row;secondRow=square.row;}else{firstRow=square.row;secondRow=selectedSquare.row;}var _availableSquares=squares.find(function(availableSquare){return availableSquare.column===square.column&&availableSquare.row>firstRow&&availableSquare.row<secondRow&&availableSquare.piece;});return _availableSquares?false:true;}return false;};var checkForBishop=function checkForBishop(selectedSquare,square,squares){if(Math.abs(square.row-selectedSquare.row)!==Math.abs(square.column-selectedSquare.column)){return false;}var firstRow,secondRow,firstColumn,secondColumn;if(selectedSquare.column<square.column){firstColumn=selectedSquare.column;secondColumn=square.column;}else{firstColumn=square.column;secondColumn=selectedSquare.column;}if(selectedSquare.row<square.row){firstRow=selectedSquare.row;secondRow=square.row;}else{firstRow=square.row;secondRow=selectedSquare.row;}var availableSquares=squares.find(function(availableSquare){return Math.abs(availableSquare.row-square.row)===Math.abs(availableSquare.column-square.column)&&availableSquare.row>firstRow&&availableSquare.row<secondRow&&availableSquare.column>firstColumn&&availableSquare.column<secondColumn&&availableSquare.piece;});return availableSquares?false:true;};var checkMove=function checkMove(selectedPiece,selectedSquare,piece,square,squares,kingInCheck){if(piece){if(selectedPiece.color===piece.color){return false;}}if(selectedPiece.piece==='rook'){return checkForRook(selectedSquare,square,squares);}if(selectedPiece.piece==='knight'){return Math.abs(selectedSquare.row-square.row)===2&&Math.abs(selectedSquare.column-square.column)===1||Math.abs(selectedSquare.row-square.row)===1&&Math.abs(selectedSquare.column-square.column)===2;}if(selectedPiece.piece==='bishop'){return checkForBishop(selectedSquare,square,squares);}if(selectedPiece.piece==='queen'){return checkForRook(selectedSquare,square,squares)||checkForBishop(selectedSquare,square,squares);}if(selectedPiece.piece==='king'){if(selectedSquare.row===square.row&&Math.abs(selectedSquare.column-square.column)===1||selectedSquare.column===square.column&&Math.abs(selectedSquare.row-square.row)===1||Math.abs(selectedSquare.row-square.row)===1&&Math.abs(selectedSquare.column-square.column)===1){return true;}if(!kingInCheck&&selectedPiece.hasMoved===undefined&&selectedSquare.row===square.row&&Math.abs(selectedSquare.column-square.column)===2){var isLeft=selectedSquare.column-square.column>0;var rook=squares.find(function(availableSquare){return availableSquare.column===(isLeft?1:8)&&availableSquare.row===square.row&&availableSquare.piece&&availableSquare.piece.piece==='rook';});if(rook&&rook.piece.hasMoved===undefined){//squares between them should not be under attack\nvar inBetweenPiece=squares.find(function(availableSquare){return availableSquare.row===rook.row&&(isLeft?availableSquare.column>1:availableSquare.column<8)&&(isLeft?availableSquare.column<selectedSquare.column:availableSquare.column>selectedSquare.column)&&availableSquare.piece;});if(inBetweenPiece){return false;}var passThroughSquare=squares.find(function(availableSquare){return square.row===availableSquare.row&&availableSquare.column===(isLeft?selectedSquare.column-1:selectedSquare.column+1);});var attackingPiece=squares.find(function(availableSquare){return availableSquare.piece&&availableSquare.piece.color!==selectedPiece.color&&checkMove(availableSquare.piece,availableSquare,passThroughSquare.piece,passThroughSquare,squares);});if(attackingPiece){return false;}rook.isCastling=true;selectedSquare.isCastling=true;return true;}}return false;}if(selectedPiece.piece==='pawn'){var sameColumn=selectedSquare.column===square.column;var rowDiff,firstRow;if(selectedPiece.color==='white'){rowDiff=selectedSquare.row-square.row;firstRow=square.row;}else{rowDiff=square.row-selectedSquare.row;firstRow=selectedSquare.row;}if(sameColumn&&rowDiff===2){if(selectedPiece.hasMoved===undefined){var availableSquares=squares.find(function(availableSquare){return availableSquare.column===square.column&&availableSquare.row===firstRow+1&&availableSquare.piece;});return availableSquares?false:true;}return false;}if(sameColumn&&rowDiff===1&&piece===null){return true;}if(Math.abs(selectedSquare.column-square.column)===1&&rowDiff===1&&piece){return true;}return false;}};export default checkMove;","map":{"version":3,"sources":["/Users/ragir/Documents/chess/chess api/chess-online/chess-react/src/checkMove.js"],"names":["checkForRook","selectedSquare","square","squares","sameRow","row","sameColumn","column","firstColumn","secondColumn","availableSquares","find","availableSquare","piece","firstRow","secondRow","checkForBishop","Math","abs","checkMove","selectedPiece","kingInCheck","color","hasMoved","undefined","isLeft","rook","inBetweenPiece","passThroughSquare","attackingPiece","isCastling","rowDiff"],"mappings":"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","sourcesContent":["const checkForRook = (selectedSquare, square, squares) => {\n\n    const sameRow = selectedSquare.row === square.row\n        const sameColumn = selectedSquare.column === square.column\n\n        if(sameRow){\n            var firstColumn, secondColumn\n\n            if(selectedSquare.column < square.column){\n                firstColumn = selectedSquare.column\n                secondColumn = square.column\n            }\n            else{\n                firstColumn = square.column\n                secondColumn = selectedSquare.column\n            }\n\n            const availableSquares = squares.find((availableSquare) => {\n                return availableSquare.row === square.row && availableSquare.column > firstColumn && availableSquare.column < secondColumn && availableSquare.piece\n            })\n\n            return (availableSquares ? false : true)\n        }\n        if(sameColumn){\n            var firstRow, secondRow\n\n            if(selectedSquare.row < square.row){\n                firstRow = selectedSquare.row\n                secondRow = square.row\n            }\n            else{\n                firstRow = square.row\n                secondRow = selectedSquare.row\n            }\n\n            const availableSquares = squares.find((availableSquare) => {\n                return availableSquare.column === square.column && availableSquare.row > firstRow && availableSquare.row < secondRow && availableSquare.piece\n            })\n\n            return (availableSquares ? false : true)\n        }\n\n        return false\n}\n\nconst checkForBishop = (selectedSquare, square, squares) => {\n    if(Math.abs(square.row - selectedSquare.row) !== Math.abs(square.column - selectedSquare.column)){\n        return false\n    }\n    var firstRow, secondRow, firstColumn, secondColumn\n\n    if(selectedSquare.column < square.column){\n        firstColumn = selectedSquare.column\n        secondColumn = square.column\n    }\n    else{\n        firstColumn = square.column\n        secondColumn = selectedSquare.column\n    }\n    if(selectedSquare.row < square.row){\n        firstRow = selectedSquare.row\n        secondRow = square.row\n    }\n    else{\n        firstRow = square.row\n        secondRow = selectedSquare.row\n    }\n\n    const availableSquares = squares.find((availableSquare) => {\n        return (\n            Math.abs(availableSquare.row - square.row) === Math.abs(availableSquare.column - square.column) &&\n            availableSquare.row > firstRow && availableSquare.row < secondRow && availableSquare.column > firstColumn && availableSquare.column < secondColumn\n            && availableSquare.piece\n        )\n    })\n\n    return (availableSquares ? false : true)\n\n}\n\n\nconst checkMove = (selectedPiece, selectedSquare, piece, square, squares, kingInCheck) => {\n    if(piece){\n        if(selectedPiece.color === piece.color){\n            return false\n        }\n    }\n    if(selectedPiece.piece === 'rook'){\n        return checkForRook(selectedSquare, square, squares)        \n    }\n\n    if(selectedPiece.piece === 'knight'){\n        return (\n            (Math.abs(selectedSquare.row - square.row) === 2 && Math.abs(selectedSquare.column - square.column) === 1) ||\n            (Math.abs(selectedSquare.row - square.row) === 1 && Math.abs(selectedSquare.column - square.column) === 2)\n        )\n    }\n\n    if(selectedPiece.piece === 'bishop'){\n        return checkForBishop(selectedSquare, square, squares)\n        \n    }\n    if(selectedPiece.piece === 'queen'){\n        return checkForRook(selectedSquare, square, squares) || checkForBishop(selectedSquare, square, squares)\n    }\n    if(selectedPiece.piece === 'king'){\n\n        if((selectedSquare.row === square.row && Math.abs(selectedSquare.column - square.column) === 1) ||\n            (selectedSquare.column === square.column && Math.abs(selectedSquare.row - square.row) === 1) ||\n            (Math.abs(selectedSquare.row - square.row) === 1 && Math.abs(selectedSquare.column - square.column) === 1)){\n                return true\n        }\n\n        if(!kingInCheck && selectedPiece.hasMoved === undefined && selectedSquare.row === square.row && Math.abs(selectedSquare.column - square.column) === 2){\n            const isLeft = selectedSquare.column - square.column > 0\n            const rook =  squares.find((availableSquare) => {\n                return availableSquare.column === (isLeft ? 1 : 8) && availableSquare.row === square.row && availableSquare.piece && availableSquare.piece.piece === 'rook'\n            })\n            if(rook && rook.piece.hasMoved === undefined){\n                //squares between them should not be under attack\n                const inBetweenPiece =  squares.find((availableSquare) => {\n                    return (\n                        availableSquare.row === rook.row &&\n                        (isLeft ? (availableSquare.column > 1) : (availableSquare.column < 8)) &&\n                        (isLeft ? (availableSquare.column < selectedSquare.column) : (availableSquare.column > selectedSquare.column)) && \n                        availableSquare.piece\n                    )\n                })\n                if(inBetweenPiece){\n                    return false\n                }\n                const passThroughSquare = squares.find((availableSquare) => {\n                    return (\n                        square.row === availableSquare.row &&\n                        availableSquare.column === (isLeft ? selectedSquare.column -1 : selectedSquare.column + 1) \n                    )\n                })\n                const attackingPiece = squares.find((availableSquare) => {\n                    return availableSquare.piece && availableSquare.piece.color !== selectedPiece.color && checkMove(availableSquare.piece, availableSquare, passThroughSquare.piece, passThroughSquare, squares)\n                })\n                if(attackingPiece){\n                    return false\n                }\n                rook.isCastling = true\n                selectedSquare.isCastling = true\n                return true\n            }\n        }\n\n        return false\n    }\n    if(selectedPiece.piece === 'pawn'){\n        const sameColumn = selectedSquare.column === square.column\n        var rowDiff, firstRow\n        if(selectedPiece.color === 'white'){\n            rowDiff = selectedSquare.row - square.row\n            firstRow = square.row\n        }\n        else{\n            rowDiff = square.row - selectedSquare.row\n            firstRow = selectedSquare.row\n        }\n        if(sameColumn && rowDiff === 2){\n            if(selectedPiece.hasMoved === undefined){\n                const availableSquares = squares.find((availableSquare) => {\n                    return availableSquare.column === square.column && availableSquare.row === firstRow+1 && availableSquare.piece\n                })\n                return (availableSquares ? false : true)\n            }\n            return false\n        }\n        if(sameColumn && rowDiff === 1 && piece === null){\n            return true\n        }\n        if(Math.abs(selectedSquare.column - square.column) === 1 && rowDiff === 1 && piece){\n            return true\n        }\n        return false\n    }\n}\nexport default checkMove"]},"metadata":{},"sourceType":"module"}