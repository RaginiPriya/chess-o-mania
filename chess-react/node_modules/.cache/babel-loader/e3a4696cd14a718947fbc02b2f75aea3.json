{"ast":null,"code":"const generateSquares = reverse => {\n  const boardRows = [{\n    label: 1,\n    top: reverse ? 7 * 10 : 0 * 10\n  }, {\n    label: 2,\n    top: reverse ? 6 * 10 : 1 * 10\n  }, {\n    label: 3,\n    top: reverse ? 5 * 10 : 2 * 10\n  }, {\n    label: 4,\n    top: reverse ? 4 * 10 : 3 * 10\n  }, {\n    label: 5,\n    top: reverse ? 3 * 10 : 4 * 10\n  }, {\n    label: 6,\n    top: reverse ? 2 * 10 : 5 * 10\n  }, {\n    label: 7,\n    top: reverse ? 1 * 10 : 6 * 10\n  }, {\n    label: 8,\n    top: reverse ? 0 * 10 : 7 * 10\n  }];\n  const boardColumns = [{\n    label: 1,\n    left: reverse ? 7 * 10 : 0 * 10\n  }, {\n    label: 2,\n    left: reverse ? 6 * 10 : 1 * 10\n  }, {\n    label: 3,\n    left: reverse ? 5 * 10 : 2 * 10\n  }, {\n    label: 4,\n    left: reverse ? 4 * 10 : 3 * 10\n  }, {\n    label: 5,\n    left: reverse ? 3 * 10 : 4 * 10\n  }, {\n    label: 6,\n    left: reverse ? 2 * 10 : 5 * 10\n  }, {\n    label: 7,\n    left: reverse ? 1 * 10 : 6 * 10\n  }, {\n    label: 8,\n    left: reverse ? 0 * 10 : 7 * 10\n  }];\n  const squares = [];\n  boardRows.forEach(row => {\n    boardColumns.forEach(col => {\n      squares.push({\n        row: row.label,\n        column: col.label,\n        topSize: row.top,\n        leftSize: col.left,\n        top: row.top + \"vh\",\n        left: col.left + \"vh\"\n      });\n    });\n  });\n  return squares;\n};\n\nexport default generateSquares;","map":{"version":3,"sources":["/Users/ragir/Documents/chess/chess-react/src/generateSquares.js"],"names":["generateSquares","reverse","boardRows","label","top","boardColumns","left","squares","forEach","row","col","push","column","topSize","leftSize"],"mappings":"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","sourcesContent":["const generateSquares = (reverse) => {\n\n    const boardRows = [\n      { label: 1, top: reverse ? 7 * 10 : 0 * 10 },\n      { label: 2, top: reverse ? 6 * 10 : 1 * 10 },\n      { label: 3, top: reverse ? 5 * 10 : 2 * 10 },\n      { label: 4, top: reverse ? 4 * 10 : 3 * 10 },\n      { label: 5, top: reverse ? 3 * 10 : 4 * 10 },\n      { label: 6, top: reverse ? 2 * 10 : 5 * 10 },\n      { label: 7, top: reverse ? 1 * 10 : 6 * 10 },\n      { label: 8, top: reverse ? 0 * 10 : 7 * 10 },\n    ];\n    \n    const boardColumns = [\n      { label: 1, left: reverse ? 7 * 10 : 0 * 10 },\n      { label: 2, left: reverse ? 6 * 10 : 1 * 10 },\n      { label: 3, left: reverse ? 5 * 10 : 2 * 10 },\n      { label: 4, left: reverse ? 4 * 10 : 3 * 10 },\n      { label: 5, left: reverse ? 3 * 10 : 4 * 10 },\n      { label: 6, left: reverse ? 2 * 10 : 5 * 10 },\n      { label: 7, left: reverse ? 1 * 10 : 6 * 10 },\n      { label: 8, left: reverse ? 0 * 10 : 7 * 10 },\n    ];\n\n      const squares = [];\n\n      boardRows.forEach((row) => {\n          boardColumns.forEach((col) => {\n            squares.push({\n                row : row.label,\n                column : col.label,\n                topSize: row.top,\n                leftSize: col.left,\n                top : row.top+\"vh\",\n                left : col.left+\"vh\"\n            });\n          })\n      })\n      return squares\n}\nexport default generateSquares"]},"metadata":{},"sourceType":"module"}